
function generateGCode(holeDiam, endmillDiam, zMovement, doc, woc, feedrate) {
  if (holeDiam < endmillDiam) { console.log("holeDiam < endmillDiam"); return }
  if (zMovement <= 0) { console.log("zMovement <=0"); return }
  if (doc < 10) { console.log("doc < 10"); return }
  if (doc > 200) { console.log("doc > 200"); return }
  if (woc < 5) { console.log("woc < 5"); return }
  if (woc > 30) { console.log("woc > 30"); return }

  var x0 = 0
  var y0 = 0
  var z0 = 0
  var zSafe = 7

  var x = x0
  var y = y0
  var z = z0
  var xyFeed = feedrate
  var zFeed = feedrate / 2
  var xStep = endmillDiam * woc / 100;
  var finishOffset = 0.2; // mm
  var xMax = (holeDiam - endmillDiam - finishOffset) / 2
  if (xMax < 0) xMax = 0
  var xMax2 = (holeDiam - endmillDiam) / 2
  var stepDown = endmillDiam * doc / 100;
  var gCode = ''
  function g(str) { gCode += str + '\n' }

  g(`; GCODE Generated by ob-hole-milling-macro on ${new Date().toISOString()}`)
  g(`; ${holeDiam}mm hole milling at 0/0/0 downto ${zMovement} with DOC=${doc}, WOC=${woc}`)
  g('G21; mm-mode')
  g('G54; Work Coordinates')
  g('G90; Absolute Positioning')
  g('M3 S1000; Spindle On')
  g('')
  g('; Begin of hole milling loop')
  g(`; Endmill Diameter: ${endmillDiam}`)
  g(`G0 Z${z0 + zSafe}; move to z-safe height`)
  g(`G0 F1000 X${x} Y${y}; move to x/y startpoint`)
  g('')

  // rough cut
  while (z >= -zMovement) {
    // step down
    z -= stepDown
    if (z < -zMovement) z = -zMovement
    g(`; layer ${z}`)
    g(`G1 F${zFeed} Z${z}; step down on current position`)

    // x/y movement for circle milling
    while (x < xMax) {
      x += xStep
      if (x > xMax) x = xMax
      g(`G1 F${xyFeed} X${x} Y0; move to x/y`)
      if (x > 0) {
        g(`G2 F${xyFeed} X-${x} Y0 I-${x} J0; 1st half circle`)
        g(`G2 F${xyFeed} X${x} Y0 I${x} J0; 2nd half circle`)
      }
      if (x >= xMax) break
    }

    // move back to center
    x = 0
    g(`G1 F${xyFeed} X${x} Y0; move to center`)

    // check for endCondition
    if (z <= -zMovement)
      break
  }

  // if we are not only drilling, then add a finishing cut
  if (xMax2 > xMax) {
    // finishing cut
    g('')
    g(';--- finishing cut with DOC=200')
    z = z0
    stepDown = endmillDiam * 200 / 100;
    //g(`G1 F${zFeed} Z${z}; go back to z0`)
    while (z >= -zMovement) {
      // step down
      z -= stepDown
      if (z < -zMovement) z = -zMovement
      g(`; layer ${z}`)
      g(`G1 F${zFeed} Z${z}; step down current position`)

      // move to outer pos
      if (x != xMax2) {
        x = xMax2
        g(`G1 F${xyFeed} X${x} Y0; move to outer finishing pos`)
      }
      g(`G3 F${xyFeed} X-${x} Y0 I-${x} J0; 1st half circle`)
      g(`G3 F${xyFeed} X${x} Y0 I${x} J0; 2nd half circle`)

      // move back to center
      if (x > 0) {
        x = 0
        g(`G1 F${xyFeed} X${x} Y0; move to center`)
      }

      // check for endCondition
      if (z <= -zMovement)
        break
    }
  }
  // move tool back to save z
  g('')
  g('; End of hole milling loop')
  if (x != x0 || y != y0)
    g(`G1 F${xyFeed} X${x0} Y${y0}; move to center of hole`)
  g(`G0 Z${z0 + zSafe}; retracting back to z-safe`)
  g('')
  g('M5 S0; Spindle Off')
  g('; Job completed')

  // replace code in G-Code editor
  editor.session.setValue(gCode);

  // refresh 3D view
  parseGcodeInWebWorker(editor.getValue())

  // not required for the macro but for testing
  return gCode;
}

function genInputHtml(label, id, value, icon, descr, append = "") {
  var html = ''
  html += '<div class="row mb-1">\n'
  if (descr)
    html += `  <label class= "cell-sm-6" > ${label}<br><small>${descr}</small></label >\n`
  else
    html += `  <label class= "cell-sm-6" > ${label}</label >\n`
  html += '  <div class="cell-sm-6">\n'
  html += `    <input id="${id}" type="number" value="${value}" data-role="input" data-append="${append}" data-prepend="<i class='fas ${icon}'></i>" data-clear-button="false">\n`
  html += '  </div>\n'
  html += '</div>\n'
  return html
}
function genSelectHtml(label, id, options, descr = '', opt = '') {
  var html = ''
  html += '<div class="row mb-1">\n'
  html += `  <label class="cell-sm-6">${label}</label>\n`
  html += '  <div class="cell-sm-6">\n'
  html += `    <select id="${id}" data-role="select" ${opt}>\n`
  html += options.map(o => `      <option value="${o}">${o}</option>\n`).join('')
  html += '    </select>\n'
  html += '  </div>\n'
  html += '</div>\n'
  if (descr)
    html += `<small>${descr}</small>`
  return html
}

// Dialog creation
Metro.dialog.create({
  title: 'Hole Milling',
  content:
    genInputHtml('Hole diameter', 'holeDiam', 8, 'fa-circle', '') +
    genInputHtml('Endmill diameter', 'endmillDiam', 4, 'fa-circle', '') +
    genInputHtml('Cutting depth', 'zMovement', 10, 'fa-ruler', '') +
    genInputHtml('DOC', 'doc', 100, 'fa-align-justify', 'depth of cut (10% - 200% of endmill diameter)', "%") +
    genInputHtml('WOC', 'woc', 20, 'fa-align-justify', 'width of cut (5% - 30% of endmill diameter)', "%") +
    //    genInputHtml('Step-down', 'stepDown', 1, 'fa-align-justify', '') +
    genInputHtml('Feedrate', 'feedrate', 100, 'fa-running', 'How fast to move the endmill in milling operation'),
  actions: [
    {
      caption: "Generate G-Code",
      cls: "js-dialog-close success",
      onclick: function () {
        const holeDiam = parseFloat($("#holeDiam").val())
        const endmillDiam = parseFloat($("#endmillDiam").val())
        const zMovement = parseFloat($("#zMovement").val())
        const doc = parseFloat($("#doc").val())
        const woc = parseFloat($("#woc").val())
        //const stepDown = parseFloat($("#stepDown").val())
        const feedrate = parseInt($("#feedrate").val())
        const mode = $('#mode').val();
        generateGCode(holeDiam, endmillDiam, zMovement, doc, woc, feedrate, mode)
      }
    }, {
      caption: "Cancel",
      cls: "js-dialog-close alert",
      onclick: function () {
      }
    }
  ]
});

// required for jest test 
try { module.exports = generateGCode; } catch (e) { }
